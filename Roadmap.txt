=== The Ouroboros Libraries Roadmap ===

This is a brief discussion on the direction of Ouroboros in the foreseeable 
future.

== LIBRARY HIERARCHY ==

             oHLSL
           /   ^   \
oBase     /    |    \
   ^     /     |     \
   oSurface  oMesh  oCompute
       ^   \   ^
       |    \  |
		 oCore   oGPU
			 \    /  ^
		    oGUI  oGfx

== oBase == 

This is where things that ought to be in C++ go such as POSIX elements, more 
robust string and memory parsing and simple ubiquitous file formats and types.


== oCore == 

This is where interfaces for basic/standard hardware exist, such as filesystem,
virtual paging memory allocator, cpu, etc.


== oSurface ==

Everything to work with textures and images and all the advanced formats 
supported by compute/GPU devices.


== oGUI ==

A dumping ground for all the Windows widgets needed during use of Ouroboros.
There isn't an intent to be another QT or WxWidgets, but there also isn't enough 
need for bringing in such large middlewares either, so leave stuff somewhat 
unapologetically Windows-specific and have it all in this one lib for GUI stuff.


== Computation (oHLSL, oCompute) ==

"Compute" is the modern encompassing term for throughput or stream computing. 
Sony Playstation 2 and 3 programmers will be familiar with the concept as it is 
fully separate from the GPU on those platforms. Basically stream computing is 
about a small algorithm and a whole lot of data being fed through that 
algorithm.

The intent in Ouroboros is to make the stream programming model available 
everywhere as technologies emerge. HLSL, GLSL and OpenCL are all very similar 
and work on primitives that have grown out of their graphics hardware roots.

Eventually Ouroboros will create a cross-compute language layer that will allow 
with minor tweaks the compute APIs to be callable on CPU (and future Sony-style 
coprocessors) as well as specialized co-processors like GPUs. The oCompute 
layer is a collection of common algorithms written in that cross-compile 
language. It is unclear at this time whether oHLSL will evolve to be the cross-
platform thing with lots of #ifdefs or if there will be an oGLSL and oOpenGL 
layer with lots of duplicate declarations, but the idea is to assume compute 
primitives because in the author's opinion the union of the big three compute 
languages should be available (including 2-3-4 tuples, basic up-to 4x4 matrices 
and swizzle operations) as part of the C++ standard library. All 4 languages 
should also have native quaternion and simple volume types.


== oFramework ==

Does not exist yet. oFramework will be allowed to make more system-wide 
assumptions as it ties more building blocks together.


== Legacy Libraries ==

oBasis, oPlatform, oConcurrency, oKinect are legacy libraries that are slowly
but surely being refactored. Some of the bigger subsystems like anything to do 
with networking are being left to last because there isn't a big test case right 
now to exercise the changes, so leave it alone until real attention can use 
cases can be used to enhance it.
